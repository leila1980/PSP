'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18052
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ReportDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ReportDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableWAREHOUSESTATEMENT_T As WAREHOUSESTATEMENT_TDataTable
    
    Private tableWarehouseStatement As WarehouseStatementDataTable
    
    Private tableWarehouseStatementDetailSerails As WarehouseStatementDetailSerailsDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("WAREHOUSESTATEMENT_T")) Is Nothing) Then
                MyBase.Tables.Add(New WAREHOUSESTATEMENT_TDataTable(ds.Tables("WAREHOUSESTATEMENT_T")))
            End If
            If (Not (ds.Tables("WarehouseStatement")) Is Nothing) Then
                MyBase.Tables.Add(New WarehouseStatementDataTable(ds.Tables("WarehouseStatement")))
            End If
            If (Not (ds.Tables("WarehouseStatementDetailSerails")) Is Nothing) Then
                MyBase.Tables.Add(New WarehouseStatementDetailSerailsDataTable(ds.Tables("WarehouseStatementDetailSerails")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WAREHOUSESTATEMENT_T() As WAREHOUSESTATEMENT_TDataTable
        Get
            Return Me.tableWAREHOUSESTATEMENT_T
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WarehouseStatement() As WarehouseStatementDataTable
        Get
            Return Me.tableWarehouseStatement
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WarehouseStatementDetailSerails() As WarehouseStatementDetailSerailsDataTable
        Get
            Return Me.tableWarehouseStatementDetailSerails
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ReportDataSet = CType(MyBase.Clone,ReportDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("WAREHOUSESTATEMENT_T")) Is Nothing) Then
                MyBase.Tables.Add(New WAREHOUSESTATEMENT_TDataTable(ds.Tables("WAREHOUSESTATEMENT_T")))
            End If
            If (Not (ds.Tables("WarehouseStatement")) Is Nothing) Then
                MyBase.Tables.Add(New WarehouseStatementDataTable(ds.Tables("WarehouseStatement")))
            End If
            If (Not (ds.Tables("WarehouseStatementDetailSerails")) Is Nothing) Then
                MyBase.Tables.Add(New WarehouseStatementDetailSerailsDataTable(ds.Tables("WarehouseStatementDetailSerails")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableWAREHOUSESTATEMENT_T = CType(MyBase.Tables("WAREHOUSESTATEMENT_T"),WAREHOUSESTATEMENT_TDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWAREHOUSESTATEMENT_T) Is Nothing) Then
                Me.tableWAREHOUSESTATEMENT_T.InitVars
            End If
        End If
        Me.tableWarehouseStatement = CType(MyBase.Tables("WarehouseStatement"),WarehouseStatementDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWarehouseStatement) Is Nothing) Then
                Me.tableWarehouseStatement.InitVars
            End If
        End If
        Me.tableWarehouseStatementDetailSerails = CType(MyBase.Tables("WarehouseStatementDetailSerails"),WarehouseStatementDetailSerailsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWarehouseStatementDetailSerails) Is Nothing) Then
                Me.tableWarehouseStatementDetailSerails.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "ReportDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ReportDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableWAREHOUSESTATEMENT_T = New WAREHOUSESTATEMENT_TDataTable()
        MyBase.Tables.Add(Me.tableWAREHOUSESTATEMENT_T)
        Me.tableWarehouseStatement = New WarehouseStatementDataTable()
        MyBase.Tables.Add(Me.tableWarehouseStatement)
        Me.tableWarehouseStatementDetailSerails = New WarehouseStatementDetailSerailsDataTable()
        MyBase.Tables.Add(Me.tableWarehouseStatementDetailSerails)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeWAREHOUSESTATEMENT_T() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeWarehouseStatement() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeWarehouseStatementDetailSerails() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ReportDataSet = New ReportDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub WAREHOUSESTATEMENT_TRowChangeEventHandler(ByVal sender As Object, ByVal e As WAREHOUSESTATEMENT_TRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub WarehouseStatementRowChangeEventHandler(ByVal sender As Object, ByVal e As WarehouseStatementRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub WarehouseStatementDetailSerailsRowChangeEventHandler(ByVal sender As Object, ByVal e As WarehouseStatementDetailSerailsRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WAREHOUSESTATEMENT_TDataTable
        Inherits Global.System.Data.TypedTableBase(Of WAREHOUSESTATEMENT_TRow)
        
        Private columnWAREHOUSESTATEMENT_ID As Global.System.Data.DataColumn
        
        Private columnWAREHOUSESTATEMENTTYPE_ID As Global.System.Data.DataColumn
        
        Private columnPROJECT_ID As Global.System.Data.DataColumn
        
        Private columnDELIVERY_ID As Global.System.Data.DataColumn
        
        Private columnACCOUNT_ID As Global.System.Data.DataColumn
        
        Private columnSTATEMENTNO As Global.System.Data.DataColumn
        
        Private columnREASON_ID As Global.System.Data.DataColumn
        
        Private columnDATE_VC As Global.System.Data.DataColumn
        
        Private columnCOMMENTS As Global.System.Data.DataColumn
        
        Private columnCREATEDDATE_VC As Global.System.Data.DataColumn
        
        Private columnUSERID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WAREHOUSESTATEMENT_T"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WAREHOUSESTATEMENT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAREHOUSESTATEMENT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WAREHOUSESTATEMENTTYPE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAREHOUSESTATEMENTTYPE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DELIVERY_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDELIVERY_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ACCOUNT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCOUNT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property STATEMENTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATEMENTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property REASON_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREASON_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATE_VCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATE_VC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATEDDATE_VCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATEDDATE_VC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property USERIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSERID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WAREHOUSESTATEMENT_TRow
            Get
                Return CType(Me.Rows(index),WAREHOUSESTATEMENT_TRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WAREHOUSESTATEMENT_TRowChanging As WAREHOUSESTATEMENT_TRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WAREHOUSESTATEMENT_TRowChanged As WAREHOUSESTATEMENT_TRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WAREHOUSESTATEMENT_TRowDeleting As WAREHOUSESTATEMENT_TRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WAREHOUSESTATEMENT_TRowDeleted As WAREHOUSESTATEMENT_TRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddWAREHOUSESTATEMENT_TRow(ByVal row As WAREHOUSESTATEMENT_TRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddWAREHOUSESTATEMENT_TRow(ByVal WAREHOUSESTATEMENT_ID As Long, ByVal WAREHOUSESTATEMENTTYPE_ID As Long, ByVal PROJECT_ID As Long, ByVal DELIVERY_ID As Long, ByVal ACCOUNT_ID As Long, ByVal STATEMENTNO As Long, ByVal REASON_ID As Long, ByVal DATE_VC As String, ByVal COMMENTS As String, ByVal CREATEDDATE_VC As Date, ByVal USERID As Decimal) As WAREHOUSESTATEMENT_TRow
            Dim rowWAREHOUSESTATEMENT_TRow As WAREHOUSESTATEMENT_TRow = CType(Me.NewRow,WAREHOUSESTATEMENT_TRow)
            Dim columnValuesArray() As Object = New Object() {WAREHOUSESTATEMENT_ID, WAREHOUSESTATEMENTTYPE_ID, PROJECT_ID, DELIVERY_ID, ACCOUNT_ID, STATEMENTNO, REASON_ID, DATE_VC, COMMENTS, CREATEDDATE_VC, USERID}
            rowWAREHOUSESTATEMENT_TRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWAREHOUSESTATEMENT_TRow)
            Return rowWAREHOUSESTATEMENT_TRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByWAREHOUSESTATEMENT_ID(ByVal WAREHOUSESTATEMENT_ID As Long) As WAREHOUSESTATEMENT_TRow
            Return CType(Me.Rows.Find(New Object() {WAREHOUSESTATEMENT_ID}),WAREHOUSESTATEMENT_TRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WAREHOUSESTATEMENT_TDataTable = CType(MyBase.Clone,WAREHOUSESTATEMENT_TDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WAREHOUSESTATEMENT_TDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnWAREHOUSESTATEMENT_ID = MyBase.Columns("WAREHOUSESTATEMENT_ID")
            Me.columnWAREHOUSESTATEMENTTYPE_ID = MyBase.Columns("WAREHOUSESTATEMENTTYPE_ID")
            Me.columnPROJECT_ID = MyBase.Columns("PROJECT_ID")
            Me.columnDELIVERY_ID = MyBase.Columns("DELIVERY_ID")
            Me.columnACCOUNT_ID = MyBase.Columns("ACCOUNT_ID")
            Me.columnSTATEMENTNO = MyBase.Columns("STATEMENTNO")
            Me.columnREASON_ID = MyBase.Columns("REASON_ID")
            Me.columnDATE_VC = MyBase.Columns("DATE_VC")
            Me.columnCOMMENTS = MyBase.Columns("COMMENTS")
            Me.columnCREATEDDATE_VC = MyBase.Columns("CREATEDDATE_VC")
            Me.columnUSERID = MyBase.Columns("USERID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnWAREHOUSESTATEMENT_ID = New Global.System.Data.DataColumn("WAREHOUSESTATEMENT_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAREHOUSESTATEMENT_ID)
            Me.columnWAREHOUSESTATEMENTTYPE_ID = New Global.System.Data.DataColumn("WAREHOUSESTATEMENTTYPE_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAREHOUSESTATEMENTTYPE_ID)
            Me.columnPROJECT_ID = New Global.System.Data.DataColumn("PROJECT_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECT_ID)
            Me.columnDELIVERY_ID = New Global.System.Data.DataColumn("DELIVERY_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDELIVERY_ID)
            Me.columnACCOUNT_ID = New Global.System.Data.DataColumn("ACCOUNT_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCOUNT_ID)
            Me.columnSTATEMENTNO = New Global.System.Data.DataColumn("STATEMENTNO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATEMENTNO)
            Me.columnREASON_ID = New Global.System.Data.DataColumn("REASON_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREASON_ID)
            Me.columnDATE_VC = New Global.System.Data.DataColumn("DATE_VC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATE_VC)
            Me.columnCOMMENTS = New Global.System.Data.DataColumn("COMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENTS)
            Me.columnCREATEDDATE_VC = New Global.System.Data.DataColumn("CREATEDDATE_VC", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATEDDATE_VC)
            Me.columnUSERID = New Global.System.Data.DataColumn("USERID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSERID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnWAREHOUSESTATEMENT_ID}, true))
            Me.columnWAREHOUSESTATEMENT_ID.AllowDBNull = false
            Me.columnWAREHOUSESTATEMENT_ID.Unique = true
            Me.columnWAREHOUSESTATEMENTTYPE_ID.AllowDBNull = false
            Me.columnPROJECT_ID.AllowDBNull = false
            Me.columnDELIVERY_ID.AllowDBNull = false
            Me.columnACCOUNT_ID.AllowDBNull = false
            Me.columnSTATEMENTNO.AllowDBNull = false
            Me.columnDATE_VC.AllowDBNull = false
            Me.columnDATE_VC.MaxLength = 10
            Me.columnCOMMENTS.MaxLength = 200
            Me.columnCREATEDDATE_VC.AllowDBNull = false
            Me.columnUSERID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewWAREHOUSESTATEMENT_TRow() As WAREHOUSESTATEMENT_TRow
            Return CType(Me.NewRow,WAREHOUSESTATEMENT_TRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WAREHOUSESTATEMENT_TRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WAREHOUSESTATEMENT_TRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WAREHOUSESTATEMENT_TRowChangedEvent) Is Nothing) Then
                RaiseEvent WAREHOUSESTATEMENT_TRowChanged(Me, New WAREHOUSESTATEMENT_TRowChangeEvent(CType(e.Row,WAREHOUSESTATEMENT_TRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WAREHOUSESTATEMENT_TRowChangingEvent) Is Nothing) Then
                RaiseEvent WAREHOUSESTATEMENT_TRowChanging(Me, New WAREHOUSESTATEMENT_TRowChangeEvent(CType(e.Row,WAREHOUSESTATEMENT_TRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WAREHOUSESTATEMENT_TRowDeletedEvent) Is Nothing) Then
                RaiseEvent WAREHOUSESTATEMENT_TRowDeleted(Me, New WAREHOUSESTATEMENT_TRowChangeEvent(CType(e.Row,WAREHOUSESTATEMENT_TRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WAREHOUSESTATEMENT_TRowDeletingEvent) Is Nothing) Then
                RaiseEvent WAREHOUSESTATEMENT_TRowDeleting(Me, New WAREHOUSESTATEMENT_TRowChangeEvent(CType(e.Row,WAREHOUSESTATEMENT_TRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveWAREHOUSESTATEMENT_TRow(ByVal row As WAREHOUSESTATEMENT_TRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ReportDataSet = New ReportDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WAREHOUSESTATEMENT_TDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WarehouseStatementDataTable
        Inherits Global.System.Data.TypedTableBase(Of WarehouseStatementRow)
        
        Private columnWAREHOUSESTATEMENT_ID As Global.System.Data.DataColumn
        
        Private columnWAREHOUSESTATEMENTTYPE_ID As Global.System.Data.DataColumn
        
        Private columnPROJECT_ID As Global.System.Data.DataColumn
        
        Private columnDELIVERY_ID As Global.System.Data.DataColumn
        
        Private columnACCOUNT_ID As Global.System.Data.DataColumn
        
        Private columnSTATEMENTNO As Global.System.Data.DataColumn
        
        Private columnREASON_ID As Global.System.Data.DataColumn
        
        Private columnDATE_VC As Global.System.Data.DataColumn
        
        Private columnCOMMENTS As Global.System.Data.DataColumn
        
        Private columnCREATEDDATE_VC As Global.System.Data.DataColumn
        
        Private columnUSERID As Global.System.Data.DataColumn
        
        Private columnSTATEMENTTYPE As Global.System.Data.DataColumn
        
        Private columnPROJECTTITLE As Global.System.Data.DataColumn
        
        Private columnDELIVERY As Global.System.Data.DataColumn
        
        Private columnACCOUNT As Global.System.Data.DataColumn
        
        Private columnREASON As Global.System.Data.DataColumn
        
        Private columnCREATEDBY As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WarehouseStatement"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WAREHOUSESTATEMENT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAREHOUSESTATEMENT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WAREHOUSESTATEMENTTYPE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAREHOUSESTATEMENTTYPE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DELIVERY_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDELIVERY_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ACCOUNT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCOUNT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property STATEMENTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATEMENTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property REASON_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREASON_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATE_VCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATE_VC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATEDDATE_VCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATEDDATE_VC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property USERIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSERID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property STATEMENTTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATEMENTTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTTITLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTTITLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DELIVERYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDELIVERY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ACCOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property REASONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREASON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATEDBYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATEDBY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WarehouseStatementRow
            Get
                Return CType(Me.Rows(index),WarehouseStatementRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WarehouseStatementRowChanging As WarehouseStatementRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WarehouseStatementRowChanged As WarehouseStatementRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WarehouseStatementRowDeleting As WarehouseStatementRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WarehouseStatementRowDeleted As WarehouseStatementRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddWarehouseStatementRow(ByVal row As WarehouseStatementRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddWarehouseStatementRow( _
                    ByVal WAREHOUSESTATEMENT_ID As Long,  _
                    ByVal WAREHOUSESTATEMENTTYPE_ID As Long,  _
                    ByVal PROJECT_ID As Long,  _
                    ByVal DELIVERY_ID As Long,  _
                    ByVal ACCOUNT_ID As Long,  _
                    ByVal STATEMENTNO As Long,  _
                    ByVal REASON_ID As Long,  _
                    ByVal DATE_VC As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal CREATEDDATE_VC As Date,  _
                    ByVal USERID As Decimal,  _
                    ByVal STATEMENTTYPE As String,  _
                    ByVal PROJECTTITLE As String,  _
                    ByVal DELIVERY As String,  _
                    ByVal ACCOUNT As String,  _
                    ByVal REASON As String,  _
                    ByVal CREATEDBY As String) As WarehouseStatementRow
            Dim rowWarehouseStatementRow As WarehouseStatementRow = CType(Me.NewRow,WarehouseStatementRow)
            Dim columnValuesArray() As Object = New Object() {WAREHOUSESTATEMENT_ID, WAREHOUSESTATEMENTTYPE_ID, PROJECT_ID, DELIVERY_ID, ACCOUNT_ID, STATEMENTNO, REASON_ID, DATE_VC, COMMENTS, CREATEDDATE_VC, USERID, STATEMENTTYPE, PROJECTTITLE, DELIVERY, ACCOUNT, REASON, CREATEDBY}
            rowWarehouseStatementRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWarehouseStatementRow)
            Return rowWarehouseStatementRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WarehouseStatementDataTable = CType(MyBase.Clone,WarehouseStatementDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WarehouseStatementDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnWAREHOUSESTATEMENT_ID = MyBase.Columns("WAREHOUSESTATEMENT_ID")
            Me.columnWAREHOUSESTATEMENTTYPE_ID = MyBase.Columns("WAREHOUSESTATEMENTTYPE_ID")
            Me.columnPROJECT_ID = MyBase.Columns("PROJECT_ID")
            Me.columnDELIVERY_ID = MyBase.Columns("DELIVERY_ID")
            Me.columnACCOUNT_ID = MyBase.Columns("ACCOUNT_ID")
            Me.columnSTATEMENTNO = MyBase.Columns("STATEMENTNO")
            Me.columnREASON_ID = MyBase.Columns("REASON_ID")
            Me.columnDATE_VC = MyBase.Columns("DATE_VC")
            Me.columnCOMMENTS = MyBase.Columns("COMMENTS")
            Me.columnCREATEDDATE_VC = MyBase.Columns("CREATEDDATE_VC")
            Me.columnUSERID = MyBase.Columns("USERID")
            Me.columnSTATEMENTTYPE = MyBase.Columns("STATEMENTTYPE")
            Me.columnPROJECTTITLE = MyBase.Columns("PROJECTTITLE")
            Me.columnDELIVERY = MyBase.Columns("DELIVERY")
            Me.columnACCOUNT = MyBase.Columns("ACCOUNT")
            Me.columnREASON = MyBase.Columns("REASON")
            Me.columnCREATEDBY = MyBase.Columns("CREATEDBY")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnWAREHOUSESTATEMENT_ID = New Global.System.Data.DataColumn("WAREHOUSESTATEMENT_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAREHOUSESTATEMENT_ID)
            Me.columnWAREHOUSESTATEMENTTYPE_ID = New Global.System.Data.DataColumn("WAREHOUSESTATEMENTTYPE_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAREHOUSESTATEMENTTYPE_ID)
            Me.columnPROJECT_ID = New Global.System.Data.DataColumn("PROJECT_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECT_ID)
            Me.columnDELIVERY_ID = New Global.System.Data.DataColumn("DELIVERY_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDELIVERY_ID)
            Me.columnACCOUNT_ID = New Global.System.Data.DataColumn("ACCOUNT_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCOUNT_ID)
            Me.columnSTATEMENTNO = New Global.System.Data.DataColumn("STATEMENTNO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATEMENTNO)
            Me.columnREASON_ID = New Global.System.Data.DataColumn("REASON_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREASON_ID)
            Me.columnDATE_VC = New Global.System.Data.DataColumn("DATE_VC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATE_VC)
            Me.columnCOMMENTS = New Global.System.Data.DataColumn("COMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENTS)
            Me.columnCREATEDDATE_VC = New Global.System.Data.DataColumn("CREATEDDATE_VC", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATEDDATE_VC)
            Me.columnUSERID = New Global.System.Data.DataColumn("USERID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSERID)
            Me.columnSTATEMENTTYPE = New Global.System.Data.DataColumn("STATEMENTTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATEMENTTYPE)
            Me.columnPROJECTTITLE = New Global.System.Data.DataColumn("PROJECTTITLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTTITLE)
            Me.columnDELIVERY = New Global.System.Data.DataColumn("DELIVERY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDELIVERY)
            Me.columnACCOUNT = New Global.System.Data.DataColumn("ACCOUNT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCOUNT)
            Me.columnREASON = New Global.System.Data.DataColumn("REASON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREASON)
            Me.columnCREATEDBY = New Global.System.Data.DataColumn("CREATEDBY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATEDBY)
            Me.columnWAREHOUSESTATEMENT_ID.ReadOnly = true
            Me.columnWAREHOUSESTATEMENTTYPE_ID.ReadOnly = true
            Me.columnPROJECT_ID.ReadOnly = true
            Me.columnDELIVERY_ID.ReadOnly = true
            Me.columnACCOUNT_ID.ReadOnly = true
            Me.columnSTATEMENTNO.ReadOnly = true
            Me.columnREASON_ID.ReadOnly = true
            Me.columnDATE_VC.ReadOnly = true
            Me.columnDATE_VC.MaxLength = 10
            Me.columnCOMMENTS.ReadOnly = true
            Me.columnCOMMENTS.MaxLength = 200
            Me.columnCREATEDDATE_VC.ReadOnly = true
            Me.columnUSERID.ReadOnly = true
            Me.columnSTATEMENTTYPE.ReadOnly = true
            Me.columnSTATEMENTTYPE.MaxLength = 20
            Me.columnPROJECTTITLE.ReadOnly = true
            Me.columnPROJECTTITLE.MaxLength = 100
            Me.columnDELIVERY.ReadOnly = true
            Me.columnDELIVERY.MaxLength = 30
            Me.columnACCOUNT.ReadOnly = true
            Me.columnACCOUNT.MaxLength = 50
            Me.columnREASON.ReadOnly = true
            Me.columnREASON.MaxLength = 100
            Me.columnCREATEDBY.ReadOnly = true
            Me.columnCREATEDBY.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewWarehouseStatementRow() As WarehouseStatementRow
            Return CType(Me.NewRow,WarehouseStatementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WarehouseStatementRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WarehouseStatementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WarehouseStatementRowChangedEvent) Is Nothing) Then
                RaiseEvent WarehouseStatementRowChanged(Me, New WarehouseStatementRowChangeEvent(CType(e.Row,WarehouseStatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WarehouseStatementRowChangingEvent) Is Nothing) Then
                RaiseEvent WarehouseStatementRowChanging(Me, New WarehouseStatementRowChangeEvent(CType(e.Row,WarehouseStatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WarehouseStatementRowDeletedEvent) Is Nothing) Then
                RaiseEvent WarehouseStatementRowDeleted(Me, New WarehouseStatementRowChangeEvent(CType(e.Row,WarehouseStatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WarehouseStatementRowDeletingEvent) Is Nothing) Then
                RaiseEvent WarehouseStatementRowDeleting(Me, New WarehouseStatementRowChangeEvent(CType(e.Row,WarehouseStatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveWarehouseStatementRow(ByVal row As WarehouseStatementRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ReportDataSet = New ReportDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WarehouseStatementDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WarehouseStatementDetailSerailsDataTable
        Inherits Global.System.Data.TypedTableBase(Of WarehouseStatementDetailSerailsRow)
        
        Private columnWAREHOUSESTATEMENTDETAIL_ID As Global.System.Data.DataColumn
        
        Private columnWAREHOUSESTATEMENTID As Global.System.Data.DataColumn
        
        Private columnCOUNT As Global.System.Data.DataColumn
        
        Private columnGOOD_ID As Global.System.Data.DataColumn
        
        Private columnNAME_NVC As Global.System.Data.DataColumn
        
        Private columnPOSMODEL_ID As Global.System.Data.DataColumn
        
        Private columnSERIAL_VC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WarehouseStatementDetailSerails"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WAREHOUSESTATEMENTDETAIL_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAREHOUSESTATEMENTDETAIL_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WAREHOUSESTATEMENTIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAREHOUSESTATEMENTID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GOOD_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGOOD_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NAME_NVCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAME_NVC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property POSMODEL_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSMODEL_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SERIAL_VCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIAL_VC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WarehouseStatementDetailSerailsRow
            Get
                Return CType(Me.Rows(index),WarehouseStatementDetailSerailsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WarehouseStatementDetailSerailsRowChanging As WarehouseStatementDetailSerailsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WarehouseStatementDetailSerailsRowChanged As WarehouseStatementDetailSerailsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WarehouseStatementDetailSerailsRowDeleting As WarehouseStatementDetailSerailsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WarehouseStatementDetailSerailsRowDeleted As WarehouseStatementDetailSerailsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddWarehouseStatementDetailSerailsRow(ByVal row As WarehouseStatementDetailSerailsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddWarehouseStatementDetailSerailsRow(ByVal WAREHOUSESTATEMENTDETAIL_ID As Long, ByVal WAREHOUSESTATEMENTID As Long, ByVal COUNT As Short, ByVal GOOD_ID As Long, ByVal NAME_NVC As String, ByVal POSMODEL_ID As Long, ByVal SERIAL_VC As String) As WarehouseStatementDetailSerailsRow
            Dim rowWarehouseStatementDetailSerailsRow As WarehouseStatementDetailSerailsRow = CType(Me.NewRow,WarehouseStatementDetailSerailsRow)
            Dim columnValuesArray() As Object = New Object() {WAREHOUSESTATEMENTDETAIL_ID, WAREHOUSESTATEMENTID, COUNT, GOOD_ID, NAME_NVC, POSMODEL_ID, SERIAL_VC}
            rowWarehouseStatementDetailSerailsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWarehouseStatementDetailSerailsRow)
            Return rowWarehouseStatementDetailSerailsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WarehouseStatementDetailSerailsDataTable = CType(MyBase.Clone,WarehouseStatementDetailSerailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WarehouseStatementDetailSerailsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnWAREHOUSESTATEMENTDETAIL_ID = MyBase.Columns("WAREHOUSESTATEMENTDETAIL_ID")
            Me.columnWAREHOUSESTATEMENTID = MyBase.Columns("WAREHOUSESTATEMENTID")
            Me.columnCOUNT = MyBase.Columns("COUNT")
            Me.columnGOOD_ID = MyBase.Columns("GOOD_ID")
            Me.columnNAME_NVC = MyBase.Columns("NAME_NVC")
            Me.columnPOSMODEL_ID = MyBase.Columns("POSMODEL_ID")
            Me.columnSERIAL_VC = MyBase.Columns("SERIAL_VC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnWAREHOUSESTATEMENTDETAIL_ID = New Global.System.Data.DataColumn("WAREHOUSESTATEMENTDETAIL_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAREHOUSESTATEMENTDETAIL_ID)
            Me.columnWAREHOUSESTATEMENTID = New Global.System.Data.DataColumn("WAREHOUSESTATEMENTID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAREHOUSESTATEMENTID)
            Me.columnCOUNT = New Global.System.Data.DataColumn("COUNT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOUNT)
            Me.columnGOOD_ID = New Global.System.Data.DataColumn("GOOD_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGOOD_ID)
            Me.columnNAME_NVC = New Global.System.Data.DataColumn("NAME_NVC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAME_NVC)
            Me.columnPOSMODEL_ID = New Global.System.Data.DataColumn("POSMODEL_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSMODEL_ID)
            Me.columnSERIAL_VC = New Global.System.Data.DataColumn("SERIAL_VC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIAL_VC)
            Me.columnWAREHOUSESTATEMENTDETAIL_ID.ReadOnly = true
            Me.columnWAREHOUSESTATEMENTID.ReadOnly = true
            Me.columnCOUNT.ReadOnly = true
            Me.columnGOOD_ID.ReadOnly = true
            Me.columnNAME_NVC.ReadOnly = true
            Me.columnNAME_NVC.MaxLength = 50
            Me.columnPOSMODEL_ID.ReadOnly = true
            Me.columnSERIAL_VC.ReadOnly = true
            Me.columnSERIAL_VC.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewWarehouseStatementDetailSerailsRow() As WarehouseStatementDetailSerailsRow
            Return CType(Me.NewRow,WarehouseStatementDetailSerailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WarehouseStatementDetailSerailsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WarehouseStatementDetailSerailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WarehouseStatementDetailSerailsRowChangedEvent) Is Nothing) Then
                RaiseEvent WarehouseStatementDetailSerailsRowChanged(Me, New WarehouseStatementDetailSerailsRowChangeEvent(CType(e.Row,WarehouseStatementDetailSerailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WarehouseStatementDetailSerailsRowChangingEvent) Is Nothing) Then
                RaiseEvent WarehouseStatementDetailSerailsRowChanging(Me, New WarehouseStatementDetailSerailsRowChangeEvent(CType(e.Row,WarehouseStatementDetailSerailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WarehouseStatementDetailSerailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent WarehouseStatementDetailSerailsRowDeleted(Me, New WarehouseStatementDetailSerailsRowChangeEvent(CType(e.Row,WarehouseStatementDetailSerailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WarehouseStatementDetailSerailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent WarehouseStatementDetailSerailsRowDeleting(Me, New WarehouseStatementDetailSerailsRowChangeEvent(CType(e.Row,WarehouseStatementDetailSerailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveWarehouseStatementDetailSerailsRow(ByVal row As WarehouseStatementDetailSerailsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ReportDataSet = New ReportDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WarehouseStatementDetailSerailsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class WAREHOUSESTATEMENT_TRow
        Inherits Global.System.Data.DataRow
        
        Private tableWAREHOUSESTATEMENT_T As WAREHOUSESTATEMENT_TDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWAREHOUSESTATEMENT_T = CType(Me.Table,WAREHOUSESTATEMENT_TDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WAREHOUSESTATEMENT_ID() As Long
            Get
                Return CType(Me(Me.tableWAREHOUSESTATEMENT_T.WAREHOUSESTATEMENT_IDColumn),Long)
            End Get
            Set
                Me(Me.tableWAREHOUSESTATEMENT_T.WAREHOUSESTATEMENT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WAREHOUSESTATEMENTTYPE_ID() As Long
            Get
                Return CType(Me(Me.tableWAREHOUSESTATEMENT_T.WAREHOUSESTATEMENTTYPE_IDColumn),Long)
            End Get
            Set
                Me(Me.tableWAREHOUSESTATEMENT_T.WAREHOUSESTATEMENTTYPE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECT_ID() As Long
            Get
                Return CType(Me(Me.tableWAREHOUSESTATEMENT_T.PROJECT_IDColumn),Long)
            End Get
            Set
                Me(Me.tableWAREHOUSESTATEMENT_T.PROJECT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DELIVERY_ID() As Long
            Get
                Return CType(Me(Me.tableWAREHOUSESTATEMENT_T.DELIVERY_IDColumn),Long)
            End Get
            Set
                Me(Me.tableWAREHOUSESTATEMENT_T.DELIVERY_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ACCOUNT_ID() As Long
            Get
                Return CType(Me(Me.tableWAREHOUSESTATEMENT_T.ACCOUNT_IDColumn),Long)
            End Get
            Set
                Me(Me.tableWAREHOUSESTATEMENT_T.ACCOUNT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property STATEMENTNO() As Long
            Get
                Return CType(Me(Me.tableWAREHOUSESTATEMENT_T.STATEMENTNOColumn),Long)
            End Get
            Set
                Me(Me.tableWAREHOUSESTATEMENT_T.STATEMENTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property REASON_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableWAREHOUSESTATEMENT_T.REASON_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REASON_ID' in table 'WAREHOUSESTATEMENT_T' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWAREHOUSESTATEMENT_T.REASON_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATE_VC() As String
            Get
                Return CType(Me(Me.tableWAREHOUSESTATEMENT_T.DATE_VCColumn),String)
            End Get
            Set
                Me(Me.tableWAREHOUSESTATEMENT_T.DATE_VCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tableWAREHOUSESTATEMENT_T.COMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENTS' in table 'WAREHOUSESTATEMENT_T' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWAREHOUSESTATEMENT_T.COMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATEDDATE_VC() As Date
            Get
                Return CType(Me(Me.tableWAREHOUSESTATEMENT_T.CREATEDDATE_VCColumn),Date)
            End Get
            Set
                Me(Me.tableWAREHOUSESTATEMENT_T.CREATEDDATE_VCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property USERID() As Decimal
            Get
                Return CType(Me(Me.tableWAREHOUSESTATEMENT_T.USERIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableWAREHOUSESTATEMENT_T.USERIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsREASON_IDNull() As Boolean
            Return Me.IsNull(Me.tableWAREHOUSESTATEMENT_T.REASON_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetREASON_IDNull()
            Me(Me.tableWAREHOUSESTATEMENT_T.REASON_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tableWAREHOUSESTATEMENT_T.COMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOMMENTSNull()
            Me(Me.tableWAREHOUSESTATEMENT_T.COMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class WarehouseStatementRow
        Inherits Global.System.Data.DataRow
        
        Private tableWarehouseStatement As WarehouseStatementDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWarehouseStatement = CType(Me.Table,WarehouseStatementDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WAREHOUSESTATEMENT_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatement.WAREHOUSESTATEMENT_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WAREHOUSESTATEMENT_ID' in table 'WarehouseStatement' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatement.WAREHOUSESTATEMENT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WAREHOUSESTATEMENTTYPE_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatement.WAREHOUSESTATEMENTTYPE_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WAREHOUSESTATEMENTTYPE_ID' in table 'WarehouseStatement' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatement.WAREHOUSESTATEMENTTYPE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECT_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatement.PROJECT_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROJECT_ID' in table 'WarehouseStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatement.PROJECT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DELIVERY_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatement.DELIVERY_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DELIVERY_ID' in table 'WarehouseStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatement.DELIVERY_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ACCOUNT_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatement.ACCOUNT_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCOUNT_ID' in table 'WarehouseStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatement.ACCOUNT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property STATEMENTNO() As Long
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatement.STATEMENTNOColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATEMENTNO' in table 'WarehouseStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatement.STATEMENTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property REASON_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatement.REASON_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REASON_ID' in table 'WarehouseStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatement.REASON_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATE_VC() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatement.DATE_VCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATE_VC' in table 'WarehouseStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatement.DATE_VCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatement.COMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENTS' in table 'WarehouseStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatement.COMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATEDDATE_VC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatement.CREATEDDATE_VCColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATEDDATE_VC' in table 'WarehouseStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatement.CREATEDDATE_VCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property USERID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatement.USERIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USERID' in table 'WarehouseStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatement.USERIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property STATEMENTTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatement.STATEMENTTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATEMENTTYPE' in table 'WarehouseStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatement.STATEMENTTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTTITLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatement.PROJECTTITLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROJECTTITLE' in table 'WarehouseStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatement.PROJECTTITLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DELIVERY() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatement.DELIVERYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DELIVERY' in table 'WarehouseStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatement.DELIVERYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ACCOUNT() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatement.ACCOUNTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCOUNT' in table 'WarehouseStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatement.ACCOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property REASON() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatement.REASONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REASON' in table 'WarehouseStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatement.REASONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATEDBY() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatement.CREATEDBYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATEDBY' in table 'WarehouseStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatement.CREATEDBYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsWAREHOUSESTATEMENT_IDNull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatement.WAREHOUSESTATEMENT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetWAREHOUSESTATEMENT_IDNull()
            Me(Me.tableWarehouseStatement.WAREHOUSESTATEMENT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsWAREHOUSESTATEMENTTYPE_IDNull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatement.WAREHOUSESTATEMENTTYPE_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetWAREHOUSESTATEMENTTYPE_IDNull()
            Me(Me.tableWarehouseStatement.WAREHOUSESTATEMENTTYPE_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROJECT_IDNull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatement.PROJECT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROJECT_IDNull()
            Me(Me.tableWarehouseStatement.PROJECT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDELIVERY_IDNull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatement.DELIVERY_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDELIVERY_IDNull()
            Me(Me.tableWarehouseStatement.DELIVERY_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsACCOUNT_IDNull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatement.ACCOUNT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetACCOUNT_IDNull()
            Me(Me.tableWarehouseStatement.ACCOUNT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSTATEMENTNONull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatement.STATEMENTNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSTATEMENTNONull()
            Me(Me.tableWarehouseStatement.STATEMENTNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsREASON_IDNull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatement.REASON_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetREASON_IDNull()
            Me(Me.tableWarehouseStatement.REASON_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDATE_VCNull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatement.DATE_VCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDATE_VCNull()
            Me(Me.tableWarehouseStatement.DATE_VCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatement.COMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOMMENTSNull()
            Me(Me.tableWarehouseStatement.COMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCREATEDDATE_VCNull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatement.CREATEDDATE_VCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCREATEDDATE_VCNull()
            Me(Me.tableWarehouseStatement.CREATEDDATE_VCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUSERIDNull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatement.USERIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUSERIDNull()
            Me(Me.tableWarehouseStatement.USERIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSTATEMENTTYPENull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatement.STATEMENTTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSTATEMENTTYPENull()
            Me(Me.tableWarehouseStatement.STATEMENTTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROJECTTITLENull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatement.PROJECTTITLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROJECTTITLENull()
            Me(Me.tableWarehouseStatement.PROJECTTITLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDELIVERYNull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatement.DELIVERYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDELIVERYNull()
            Me(Me.tableWarehouseStatement.DELIVERYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsACCOUNTNull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatement.ACCOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetACCOUNTNull()
            Me(Me.tableWarehouseStatement.ACCOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsREASONNull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatement.REASONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetREASONNull()
            Me(Me.tableWarehouseStatement.REASONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCREATEDBYNull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatement.CREATEDBYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCREATEDBYNull()
            Me(Me.tableWarehouseStatement.CREATEDBYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class WarehouseStatementDetailSerailsRow
        Inherits Global.System.Data.DataRow
        
        Private tableWarehouseStatementDetailSerails As WarehouseStatementDetailSerailsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWarehouseStatementDetailSerails = CType(Me.Table,WarehouseStatementDetailSerailsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WAREHOUSESTATEMENTDETAIL_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatementDetailSerails.WAREHOUSESTATEMENTDETAIL_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WAREHOUSESTATEMENTDETAIL_ID' in table 'WarehouseStatementDe"& _ 
                            "tailSerails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatementDetailSerails.WAREHOUSESTATEMENTDETAIL_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WAREHOUSESTATEMENTID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatementDetailSerails.WAREHOUSESTATEMENTIDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WAREHOUSESTATEMENTID' in table 'WarehouseStatementDetailSer"& _ 
                            "ails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatementDetailSerails.WAREHOUSESTATEMENTIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COUNT() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatementDetailSerails.COUNTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COUNT' in table 'WarehouseStatementDetailSerails' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatementDetailSerails.COUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GOOD_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatementDetailSerails.GOOD_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GOOD_ID' in table 'WarehouseStatementDetailSerails' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatementDetailSerails.GOOD_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NAME_NVC() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatementDetailSerails.NAME_NVCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NAME_NVC' in table 'WarehouseStatementDetailSerails' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatementDetailSerails.NAME_NVCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property POSMODEL_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatementDetailSerails.POSMODEL_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POSMODEL_ID' in table 'WarehouseStatementDetailSerails' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatementDetailSerails.POSMODEL_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SERIAL_VC() As String
            Get
                Try 
                    Return CType(Me(Me.tableWarehouseStatementDetailSerails.SERIAL_VCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SERIAL_VC' in table 'WarehouseStatementDetailSerails' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableWarehouseStatementDetailSerails.SERIAL_VCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsWAREHOUSESTATEMENTDETAIL_IDNull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatementDetailSerails.WAREHOUSESTATEMENTDETAIL_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetWAREHOUSESTATEMENTDETAIL_IDNull()
            Me(Me.tableWarehouseStatementDetailSerails.WAREHOUSESTATEMENTDETAIL_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsWAREHOUSESTATEMENTIDNull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatementDetailSerails.WAREHOUSESTATEMENTIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetWAREHOUSESTATEMENTIDNull()
            Me(Me.tableWarehouseStatementDetailSerails.WAREHOUSESTATEMENTIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOUNTNull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatementDetailSerails.COUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOUNTNull()
            Me(Me.tableWarehouseStatementDetailSerails.COUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGOOD_IDNull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatementDetailSerails.GOOD_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGOOD_IDNull()
            Me(Me.tableWarehouseStatementDetailSerails.GOOD_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNAME_NVCNull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatementDetailSerails.NAME_NVCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNAME_NVCNull()
            Me(Me.tableWarehouseStatementDetailSerails.NAME_NVCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPOSMODEL_IDNull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatementDetailSerails.POSMODEL_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPOSMODEL_IDNull()
            Me(Me.tableWarehouseStatementDetailSerails.POSMODEL_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSERIAL_VCNull() As Boolean
            Return Me.IsNull(Me.tableWarehouseStatementDetailSerails.SERIAL_VCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSERIAL_VCNull()
            Me(Me.tableWarehouseStatementDetailSerails.SERIAL_VCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class WAREHOUSESTATEMENT_TRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WAREHOUSESTATEMENT_TRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As WAREHOUSESTATEMENT_TRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As WAREHOUSESTATEMENT_TRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class WarehouseStatementRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WarehouseStatementRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As WarehouseStatementRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As WarehouseStatementRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class WarehouseStatementDetailSerailsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WarehouseStatementDetailSerailsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As WarehouseStatementDetailSerailsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As WarehouseStatementDetailSerailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace ReportDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class WAREHOUSESTATEMENT_TTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.DataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.DataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.DataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.DataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.DataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.DataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.DataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.DataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.DataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.DataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "WAREHOUSESTATEMENT_T"
            tableMapping.ColumnMappings.Add("WAREHOUSESTATEMENT_ID", "WAREHOUSESTATEMENT_ID")
            tableMapping.ColumnMappings.Add("WAREHOUSESTATEMENTTYPE_ID", "WAREHOUSESTATEMENTTYPE_ID")
            tableMapping.ColumnMappings.Add("PROJECT_ID", "PROJECT_ID")
            tableMapping.ColumnMappings.Add("DELIVERY_ID", "DELIVERY_ID")
            tableMapping.ColumnMappings.Add("ACCOUNT_ID", "ACCOUNT_ID")
            tableMapping.ColumnMappings.Add("STATEMENTNO", "STATEMENTNO")
            tableMapping.ColumnMappings.Add("REASON_ID", "REASON_ID")
            tableMapping.ColumnMappings.Add("DATE_VC", "DATE_VC")
            tableMapping.ColumnMappings.Add("COMMENTS", "COMMENTS")
            tableMapping.ColumnMappings.Add("CREATEDDATE_VC", "CREATEDDATE_VC")
            tableMapping.ColumnMappings.Add("USERID", "USERID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""PSPSHAPARAK"".""WAREHOUSESTATEMENT_T"" WHERE ((""WAREHOUSESTATEMENT_ID"" "& _ 
                "= :Original_WAREHOUSESTATEMENT_ID) AND (""WAREHOUSESTATEMENTTYPE_ID"" = :p2) AND ("& _ 
                """PROJECT_ID"" = :Original_PROJECT_ID) AND (""DELIVERY_ID"" = :Original_DELIVERY_ID)"& _ 
                " AND (""ACCOUNT_ID"" = :Original_ACCOUNT_ID) AND (""STATEMENTNO"" = :Original_STATEM"& _ 
                "ENTNO) AND ((:IsNull_REASON_ID = 1 AND ""REASON_ID"" IS NULL) OR (""REASON_ID"" = :O"& _ 
                "riginal_REASON_ID)) AND (""DATE_VC"" = :Original_DATE_VC) AND ((:IsNull_COMMENTS ="& _ 
                " 1 AND ""COMMENTS"" IS NULL) OR (""COMMENTS"" = :Original_COMMENTS)) AND (""CREATEDDA"& _ 
                "TE_VC"" = :Original_CREATEDDATE_VC) AND (""USERID"" = :Original_USERID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.DataAccess.Client.OracleParameter = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WAREHOUSESTATEMENT_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "WAREHOUSESTATEMENT_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "p2"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "WAREHOUSESTATEMENTTYPE_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PROJECT_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "PROJECT_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DELIVERY_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "DELIVERY_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ACCOUNT_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "ACCOUNT_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STATEMENTNO"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "STATEMENTNO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_REASON_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "REASON_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_REASON_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "REASON_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DATE_VC"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "DATE_VC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_COMMENTS"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "COMMENTS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COMMENTS"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NVarchar2
            param.IsNullable = true
            param.SourceColumn = "COMMENTS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CREATEDDATE_VC"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "CREATEDDATE_VC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USERID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "USERID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""PSPSHAPARAK"".""WAREHOUSESTATEMENT_T"" (""WAREHOUSESTATEMENT_ID"", ""WAREH"& _ 
                "OUSESTATEMENTTYPE_ID"", ""PROJECT_ID"", ""DELIVERY_ID"", ""ACCOUNT_ID"", ""STATEMENTNO"","& _ 
                " ""REASON_ID"", ""DATE_VC"", ""COMMENTS"", ""CREATEDDATE_VC"", ""USERID"") VALUES (:WAREHO"& _ 
                "USESTATEMENT_ID, :p1, :PROJECT_ID, :DELIVERY_ID, :ACCOUNT_ID, :STATEMENTNO, :REA"& _ 
                "SON_ID, :DATE_VC, :COMMENTS, :CREATEDDATE_VC, :USERID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "WAREHOUSESTATEMENT_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "WAREHOUSESTATEMENT_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "p1"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "WAREHOUSESTATEMENTTYPE_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "PROJECT_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "PROJECT_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "DELIVERY_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "DELIVERY_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "ACCOUNT_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "ACCOUNT_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "STATEMENTNO"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "STATEMENTNO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "REASON_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "REASON_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "DATE_VC"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "DATE_VC"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COMMENTS"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NVarchar2
            param.IsNullable = true
            param.SourceColumn = "COMMENTS"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "CREATEDDATE_VC"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "CREATEDDATE_VC"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "USERID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "USERID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""PSPSHAPARAK"".""WAREHOUSESTATEMENT_T"" SET ""WAREHOUSESTATEMENT_ID"" = :WAREHO"& _ 
                "USESTATEMENT_ID, ""WAREHOUSESTATEMENTTYPE_ID"" = :p1, ""PROJECT_ID"" = :PROJECT_ID, "& _ 
                """DELIVERY_ID"" = :DELIVERY_ID, ""ACCOUNT_ID"" = :ACCOUNT_ID, ""STATEMENTNO"" = :STATE"& _ 
                "MENTNO, ""REASON_ID"" = :REASON_ID, ""DATE_VC"" = :DATE_VC, ""COMMENTS"" = :COMMENTS, "& _ 
                """CREATEDDATE_VC"" = :CREATEDDATE_VC, ""USERID"" = :USERID WHERE ((""WAREHOUSESTATEME"& _ 
                "NT_ID"" = :Original_WAREHOUSESTATEMENT_ID) AND (""WAREHOUSESTATEMENTTYPE_ID"" = :p2"& _ 
                ") AND (""PROJECT_ID"" = :Original_PROJECT_ID) AND (""DELIVERY_ID"" = :Original_DELIV"& _ 
                "ERY_ID) AND (""ACCOUNT_ID"" = :Original_ACCOUNT_ID) AND (""STATEMENTNO"" = :Original"& _ 
                "_STATEMENTNO) AND ((:IsNull_REASON_ID = 1 AND ""REASON_ID"" IS NULL) OR (""REASON_I"& _ 
                "D"" = :Original_REASON_ID)) AND (""DATE_VC"" = :Original_DATE_VC) AND ((:IsNull_COM"& _ 
                "MENTS = 1 AND ""COMMENTS"" IS NULL) OR (""COMMENTS"" = :Original_COMMENTS)) AND (""CR"& _ 
                "EATEDDATE_VC"" = :Original_CREATEDDATE_VC) AND (""USERID"" = :Original_USERID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "WAREHOUSESTATEMENT_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "WAREHOUSESTATEMENT_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "p1"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "WAREHOUSESTATEMENTTYPE_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "PROJECT_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "PROJECT_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "DELIVERY_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "DELIVERY_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "ACCOUNT_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "ACCOUNT_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "STATEMENTNO"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "STATEMENTNO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "REASON_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "REASON_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "DATE_VC"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "DATE_VC"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COMMENTS"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NVarchar2
            param.IsNullable = true
            param.SourceColumn = "COMMENTS"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "CREATEDDATE_VC"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "CREATEDDATE_VC"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "USERID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "USERID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_WAREHOUSESTATEMENT_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "WAREHOUSESTATEMENT_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "p2"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "WAREHOUSESTATEMENTTYPE_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PROJECT_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "PROJECT_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DELIVERY_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "DELIVERY_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ACCOUNT_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "ACCOUNT_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_STATEMENTNO"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "STATEMENTNO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_REASON_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "REASON_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_REASON_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "REASON_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DATE_VC"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "DATE_VC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_COMMENTS"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "COMMENTS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COMMENTS"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NVarchar2
            param.IsNullable = true
            param.SourceColumn = "COMMENTS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CREATEDDATE_VC"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "CREATEDDATE_VC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_USERID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "USERID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.DataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.DataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT WAREHOUSESTATEMENT_ID, WAREHOUSESTATEMENTTYPE_ID, PROJECT_ID, DELIVERY_ID,"& _ 
                " ACCOUNT_ID, STATEMENTNO, REASON_ID, DATE_VC, COMMENTS, CREATEDDATE_VC, USERID F"& _ 
                "ROM PSPSHAPARAK.WAREHOUSESTATEMENT_T"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ReportDataSet.WAREHOUSESTATEMENT_TDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ReportDataSet.WAREHOUSESTATEMENT_TDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ReportDataSet.WAREHOUSESTATEMENT_TDataTable = New ReportDataSet.WAREHOUSESTATEMENT_TDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ReportDataSet.WAREHOUSESTATEMENT_TDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ReportDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "WAREHOUSESTATEMENT_T")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_WAREHOUSESTATEMENT_ID As Long, ByVal p2 As Long, ByVal Original_PROJECT_ID As Long, ByVal Original_DELIVERY_ID As Long, ByVal Original_ACCOUNT_ID As Long, ByVal Original_STATEMENTNO As Long, ByVal Original_REASON_ID As Global.System.Nullable(Of Long), ByVal Original_DATE_VC As String, ByVal Original_COMMENTS As String, ByVal Original_CREATEDDATE_VC As Date, ByVal Original_USERID As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_WAREHOUSESTATEMENT_ID,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,Long)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PROJECT_ID,Long)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DELIVERY_ID,Long)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ACCOUNT_ID,Long)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_STATEMENTNO,Long)
            If (Original_REASON_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_REASON_ID.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_DATE_VC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATE_VC")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_DATE_VC,String)
            End If
            If (Original_COMMENTS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_COMMENTS,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_CREATEDDATE_VC,Date)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_USERID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal WAREHOUSESTATEMENT_ID As Long, ByVal p1 As Long, ByVal PROJECT_ID As Long, ByVal DELIVERY_ID As Long, ByVal ACCOUNT_ID As Long, ByVal STATEMENTNO As Long, ByVal REASON_ID As Global.System.Nullable(Of Long), ByVal DATE_VC As String, ByVal COMMENTS As String, ByVal CREATEDDATE_VC As Date, ByVal USERID As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(WAREHOUSESTATEMENT_ID,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(p1,Long)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(PROJECT_ID,Long)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(DELIVERY_ID,Long)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ACCOUNT_ID,Long)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(STATEMENTNO,Long)
            If (REASON_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(REASON_ID.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (DATE_VC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATE_VC")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(DATE_VC,String)
            End If
            If (COMMENTS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(COMMENTS,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(CREATEDDATE_VC,Date)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(USERID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal WAREHOUSESTATEMENT_ID As Long,  _
                    ByVal p1 As Long,  _
                    ByVal PROJECT_ID As Long,  _
                    ByVal DELIVERY_ID As Long,  _
                    ByVal ACCOUNT_ID As Long,  _
                    ByVal STATEMENTNO As Long,  _
                    ByVal REASON_ID As Global.System.Nullable(Of Long),  _
                    ByVal DATE_VC As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal CREATEDDATE_VC As Date,  _
                    ByVal USERID As Decimal,  _
                    ByVal Original_WAREHOUSESTATEMENT_ID As Long,  _
                    ByVal p2 As Long,  _
                    ByVal Original_PROJECT_ID As Long,  _
                    ByVal Original_DELIVERY_ID As Long,  _
                    ByVal Original_ACCOUNT_ID As Long,  _
                    ByVal Original_STATEMENTNO As Long,  _
                    ByVal Original_REASON_ID As Global.System.Nullable(Of Long),  _
                    ByVal Original_DATE_VC As String,  _
                    ByVal Original_COMMENTS As String,  _
                    ByVal Original_CREATEDDATE_VC As Date,  _
                    ByVal Original_USERID As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(WAREHOUSESTATEMENT_ID,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p1,Long)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PROJECT_ID,Long)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DELIVERY_ID,Long)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ACCOUNT_ID,Long)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(STATEMENTNO,Long)
            If (REASON_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(REASON_ID.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (DATE_VC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATE_VC")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(DATE_VC,String)
            End If
            If (COMMENTS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(COMMENTS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(CREATEDDATE_VC,Date)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(USERID,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_WAREHOUSESTATEMENT_ID,Long)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p2,Long)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_PROJECT_ID,Long)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_DELIVERY_ID,Long)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ACCOUNT_ID,Long)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_STATEMENTNO,Long)
            If (Original_REASON_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_REASON_ID.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_DATE_VC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATE_VC")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_DATE_VC,String)
            End If
            If (Original_COMMENTS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_COMMENTS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_CREATEDDATE_VC,Date)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_USERID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As Long,  _
                    ByVal PROJECT_ID As Long,  _
                    ByVal DELIVERY_ID As Long,  _
                    ByVal ACCOUNT_ID As Long,  _
                    ByVal STATEMENTNO As Long,  _
                    ByVal REASON_ID As Global.System.Nullable(Of Long),  _
                    ByVal DATE_VC As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal CREATEDDATE_VC As Date,  _
                    ByVal USERID As Decimal,  _
                    ByVal Original_WAREHOUSESTATEMENT_ID As Long,  _
                    ByVal p2 As Long,  _
                    ByVal Original_PROJECT_ID As Long,  _
                    ByVal Original_DELIVERY_ID As Long,  _
                    ByVal Original_ACCOUNT_ID As Long,  _
                    ByVal Original_STATEMENTNO As Long,  _
                    ByVal Original_REASON_ID As Global.System.Nullable(Of Long),  _
                    ByVal Original_DATE_VC As String,  _
                    ByVal Original_COMMENTS As String,  _
                    ByVal Original_CREATEDDATE_VC As Date,  _
                    ByVal Original_USERID As Decimal) As Integer
            Return Me.Update(Original_WAREHOUSESTATEMENT_ID, p1, PROJECT_ID, DELIVERY_ID, ACCOUNT_ID, STATEMENTNO, REASON_ID, DATE_VC, COMMENTS, CREATEDDATE_VC, USERID, Original_WAREHOUSESTATEMENT_ID, p2, Original_PROJECT_ID, Original_DELIVERY_ID, Original_ACCOUNT_ID, Original_STATEMENTNO, Original_REASON_ID, Original_DATE_VC, Original_COMMENTS, Original_CREATEDDATE_VC, Original_USERID)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _wAREHOUSESTATEMENT_TTableAdapter As WAREHOUSESTATEMENT_TTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property WAREHOUSESTATEMENT_TTableAdapter() As WAREHOUSESTATEMENT_TTableAdapter
            Get
                Return Me._wAREHOUSESTATEMENT_TTableAdapter
            End Get
            Set
                Me._wAREHOUSESTATEMENT_TTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._wAREHOUSESTATEMENT_TTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._wAREHOUSESTATEMENT_TTableAdapter.Connection) Is Nothing)) Then
                    Return Me._wAREHOUSESTATEMENT_TTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._wAREHOUSESTATEMENT_TTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As ReportDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._wAREHOUSESTATEMENT_TTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.WAREHOUSESTATEMENT_T.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._wAREHOUSESTATEMENT_TTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As ReportDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._wAREHOUSESTATEMENT_TTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.WAREHOUSESTATEMENT_T.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._wAREHOUSESTATEMENT_TTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As ReportDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._wAREHOUSESTATEMENT_TTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.WAREHOUSESTATEMENT_T.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._wAREHOUSESTATEMENT_TTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As ReportDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._wAREHOUSESTATEMENT_TTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._wAREHOUSESTATEMENT_TTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._wAREHOUSESTATEMENT_TTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._wAREHOUSESTATEMENT_TTableAdapter, Me._wAREHOUSESTATEMENT_TTableAdapter.Connection)
                    Me._wAREHOUSESTATEMENT_TTableAdapter.Connection = CType(workConnection,Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._wAREHOUSESTATEMENT_TTableAdapter.Transaction = CType(workTransaction,Global.Oracle.DataAccess.Client.OracleTransaction)
                    If Me._wAREHOUSESTATEMENT_TTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._wAREHOUSESTATEMENT_TTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._wAREHOUSESTATEMENT_TTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._wAREHOUSESTATEMENT_TTableAdapter) Is Nothing) Then
                    Me._wAREHOUSESTATEMENT_TTableAdapter.Connection = CType(revertConnections(Me._wAREHOUSESTATEMENT_TTableAdapter),Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._wAREHOUSESTATEMENT_TTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
